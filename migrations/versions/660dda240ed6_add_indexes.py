import sqlalchemy as sa
from alembic import op
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = "660dda240ed6"
down_revision = "ed32e620bc0e"
branch_labels = None
depends_on = None


def column_exists(table_name, column_name):
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    columns = inspector.get_columns(table_name)
    return any(column["name"] == column_name for column in columns)


def upgrade():
    # Default user ID for existing rows
    default_user_id = 1

    # Drop temporary table if it exists
    op.execute("DROP TABLE IF EXISTS _alembic_tmp_comment")
    op.execute("DROP TABLE IF EXISTS _alembic_tmp_post")

    # ### commands auto generated by Alembic - please adjust! ###
    if not column_exists("comment", "user_id"):
        with op.batch_alter_table("comment", schema=None) as batch_op:
            # Step 1: Add the column as nullable
            batch_op.add_column(sa.Column("user_id", sa.Integer(), nullable=True))

    # Step 2: Update existing rows with the default user ID
    op.execute(f"UPDATE comment SET user_id = {default_user_id}")

    if not column_exists("comment", "user_id"):
        with op.batch_alter_table("comment", schema=None) as batch_op:
            # Step 3: Alter the column to be not nullable
            batch_op.alter_column("user_id", existing_type=sa.Integer(), nullable=False)
            # Step 4: Create foreign key and index
            batch_op.create_foreign_key("fk_comment_user", "user", ["user_id"], ["id"])
            batch_op.create_index(
                "ix_comment_date_posted", ["date_posted"], unique=False
            )

    if not column_exists("post", "user_id"):
        with op.batch_alter_table("post", schema=None) as batch_op:
            # Step 1: Add the column as nullable
            batch_op.add_column(sa.Column("user_id", sa.Integer(), nullable=True))

    # Step 2: Update existing rows with the default user ID
    op.execute(f"UPDATE post SET user_id = {default_user_id}")

    if not column_exists("post", "user_id"):
        with op.batch_alter_table("post", schema=None) as batch_op:
            # Step 3: Alter the column to be not nullable
            batch_op.alter_column("user_id", existing_type=sa.Integer(), nullable=False)
            # Step 4: Create foreign key and indexes
            batch_op.create_foreign_key("fk_post_user", "user", ["user_id"], ["id"])
            batch_op.create_index("ix_post_title", ["title"], unique=False)
            batch_op.create_index("ix_post_date_posted", ["date_posted"], unique=False)

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.add_column(sa.Column("created_at", sa.DateTime(), nullable=True))
        batch_op.create_index("ix_user_created_at", ["created_at"], unique=False)
        batch_op.create_index(
            "ix_user_username_email", ["username", "email"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index("ix_user_username_email")
        batch_op.drop_index("ix_user_created_at")
        batch_op.drop_column("created_at")

    with op.batch_alter_table("post", schema=None) as batch_op:
        batch_op.drop_constraint("fk_post_user", type_="foreignkey")
        batch_op.drop_index("ix_post_title")
        batch_op.drop_index("ix_post_date_posted")
        batch_op.drop_column("user_id")

    with op.batch_alter_table("comment", schema=None) as batch_op:
        batch_op.drop_constraint("fk_comment_user", type_="foreignkey")
        batch_op.drop_index("ix_comment_date_posted")
        batch_op.drop_column("user_id")

    # ### end Alembic commands ###
